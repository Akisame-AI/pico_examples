# Display Image & text on I2C driven sh1122 OLED display 
from machine import Pin, SPI, Timer
from drivers.sh1122 import SH1122_SPI
import framebuf
import adc

WIDTH  = 256                                    # oled display width
HEIGHT = 64                                     # oled display height

#SPI(0, baudrate=10416666, polarity=0, phase=0, bits=8, sck=6, mosi=7, miso=4)
spi = SPI(0, baudrate=1000000)                # Init I2C using I2C0 defaults, SCL=Pin(GP6), MOSI=Pin(GP7), freq=1m
dc = Pin(4, Pin.OUT)
dc.value(0)
res = Pin(3, Pin.OUT)
res.value(1)
cs = Pin(5, Pin.OUT)
cs.value(1)
gp15 = Pin(15, Pin.IN, Pin.PULL_UP)


oled = SH1122_SPI(WIDTH, HEIGHT, spi, dc, res, cs)                  # Init oled display

# Raspberry Pi logo as 32x40 bytearray 16 levels of gray
buffer = bytearray(b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x11\x45\x56\x41\x00\x00\x00\x00\x14\x55\x54\x11\x00\x00\
\x00\x16\x8A\xAA\xAA\xAA\x73\x00\x00\x36\x9A\xAA\xAA\xA9\x61\x00\
\x00\x18\xAA\xAA\xAA\xAA\xAA\x30\x02\xAA\xAA\xAA\xAA\xAA\x91\x00\
\x00\x18\xAA\x97\x8A\xAA\xAA\x80\x07\xAA\xAA\xA8\x79\xAA\x91\x00\
\x00\x07\xAA\xAA\x85\x7A\xAA\xA1\x0A\xAA\xA8\x58\xAA\xAA\x70\x00\
\x00\x03\xAA\xAA\xAA\x63\x9A\xA1\x0A\xA9\x45\xAA\xAA\xAA\x30\x00\
\x00\x00\x6A\xAA\xAA\xA8\x27\x40\x03\x72\x8A\xAA\xAA\xA7\x00\x00\
\x00\x00\x28\xAA\xAA\xAA\x91\x00\x00\x08\xAA\xAA\xAA\x83\x00\x00\
\x00\x00\x03\x8A\xAA\xAA\x70\x00\x00\x06\xAA\xAA\xA8\x30\x00\x00\
\x00\x00\x00\x15\x8A\x95\x00\x00\x00\x00\x59\xA9\x52\x00\x00\x00\
\x00\x00\x00\x00\x11\x00\x00\x34\x43\x10\x00\x11\x00\x00\x00\x00\
\x00\x00\x00\x02\x55\x51\x26\x66\x66\x62\x05\x54\x20\x00\x00\x00\
\x00\x00\x00\x46\x66\x30\x66\x66\x66\x66\x12\x66\x65\x00\x00\x00\
\x00\x00\x03\x66\x63\x00\x46\x66\x66\x66\x10\x26\x66\x40\x00\x00\
\x00\x00\x06\x66\x20\x00\x03\x56\x66\x41\x00\x02\x66\x61\x00\x00\
\x00\x00\x16\x51\x01\x23\x20\x00\x00\x13\x54\x20\x15\x62\x00\x00\
\x00\x00\x13\x00\x36\x66\x65\x10\x01\x66\x66\x65\x00\x32\x00\x00\
\x00\x00\x00\x02\x66\x66\x66\x50\x04\x66\x66\x66\x40\x00\x00\x00\
\x00\x03\x40\x06\x66\x66\x66\x61\x06\x66\x66\x66\x62\x05\x40\x00\
\x00\x36\x60\x26\x66\x66\x66\x61\x06\x66\x66\x66\x64\x06\x64\x00\
\x00\x66\x61\x36\x66\x66\x66\x60\x05\x66\x66\x66\x64\x16\x66\x10\
\x02\x66\x60\x36\x66\x66\x66\x40\x02\x66\x66\x66\x64\x06\x66\x20\
\x02\x66\x50\x16\x66\x66\x66\x10\x00\x46\x66\x66\x61\x05\x66\x20\
\x01\x66\x40\x03\x66\x66\x51\x01\x10\x04\x66\x66\x30\x04\x66\x10\
\x00\x56\x20\x00\x13\x32\x03\x66\x66\x30\x12\x21\x00\x02\x65\x00\
\x00\x14\x00\x00\x00\x00\x46\x66\x66\x65\x00\x00\x02\x31\x31\x00\
\x00\x00\x36\x52\x00\x01\x66\x66\x66\x66\x20\x01\x56\x64\x00\x00\
\x00\x00\x66\x66\x30\x03\x66\x66\x66\x66\x40\x15\x66\x66\x00\x00\
\x00\x00\x66\x66\x63\x03\x66\x66\x66\x66\x40\x56\x66\x66\x00\x00\
\x00\x00\x56\x66\x66\x11\x66\x66\x66\x66\x22\x66\x66\x65\x00\x00\
\x00\x00\x36\x66\x66\x30\x46\x66\x66\x65\x04\x66\x66\x64\x00\x00\
\x00\x00\x05\x66\x66\x40\x03\x66\x66\x30\x05\x66\x66\x51\x00\x00\
\x00\x00\x01\x56\x66\x40\x00\x01\x10\x00\x05\x66\x65\x10\x00\x00\
\x00\x00\x00\x02\x33\x10\x01\x23\x32\x10\x02\x44\x30\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x46\x66\x66\x65\x20\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x01\x66\x66\x66\x66\x20\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x26\x66\x66\x62\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x34\x43\x10\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
# Load the raspberry pi logo into the framebuffer (the image is 32x40)
fb = framebuf.FrameBuffer(buffer, 32, 40, framebuf.GS4_HMSB)

# Clear the oled display in case it has junk on it.
oled.fill(0)

# Blit the image from the framebuffer to the oled display
oled.blit(fb, 112, 0)

# Add some text
oled.text("Raspberry Pi", 5, 5, 15)
oled.text("Pico", 5, 15, 15)
if (HEIGHT > 32):
    oled.text("This display", 5, 25, 12)
    oled.text("has more than", 5, 35, 8)
    oled.text(" 32 lines", 5, 45, 4)

if (WIDTH > 128):
    oled.text("This display", 149, 25, 12)
    oled.text("has more than", 149, 35, 8)
    oled.text(" 128 pixels", 149, 45, 4)
    
# Add a color scale
# the color scale shift one step each time the function is called
offset = 0
def colorScale(timer):
    global offset
    global increment
    for i in range(16):
        oled.fill_rect(i*8, 55, 8, 8, (i + offset) % 16)
        oled.fill_rect((255-8)-i*8, 55, 8, 8, (i + offset) % 16)
    offset = offset + increment
    if (offset == 16):
        increment = -1
    if (offset == 0):
        increment = 1
    oled.show()
    
# Display VSYS voltage and core temp
def status(timer):
    orx=149
    ory=5
    oled.fill_rect(orx, ory, 100, 20,0)
    oled.text( "{:0.1f}C - {:0.2f}V".format(adc.coreTemp(), adc.VSYS()), orx, ory, 15)
    oled.show()

# Display GPIO15 state
def testio(timer):
    if (gp15.value()):
        couleur1 = 15
    else:
        couleur1 = 3
    oled.text("15", 120, 45, couleur1)

# Finally update the oled display so the image & text is displayed
oled.show()
offset = 0
increment = 1
status(0)
# create 3 timers which will callback the dynamic display
timer = Timer()
timer2 = Timer()
timer3 = Timer()
timer.init(period=100, mode=Timer.PERIODIC, callback=colorScale)
timer2.init(period=2000, mode=Timer.PERIODIC, callback=status)
timer3.init(period=50, mode=Timer.PERIODIC, callback=testio)

